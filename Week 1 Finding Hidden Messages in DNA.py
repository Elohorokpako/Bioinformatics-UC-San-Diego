#!/usr/bin/env python
# coding: utf-8

# ### Question 1.
# 
# > Code Challenge: Implement PatternCount (reproduced below).
# 
# > Input: Strings Text and Pattern.
# 
# > Output: Count(Text, Pattern).
# 
# Sample Input:
# 
# GCGCG
# GCG
# 
# 
# Sample Output:
# 
# 2

# #### Solution

# In[7]:


#using list comprehension to count the number of occurences of a pattern in a string
def Counter (dna,pattern):
    j=len(pattern)
    answer=sum([1 for i in range(len(dna)) if dna[i:j+i]==pattern])
    return answer


# In[10]:


Counter("GCGCG","GCG")


# ##### Actual Dataset

# In[11]:


dna="ATCTCGTCATAGTTCGTATCTCGTATATCTCGTTTCTGATCTCGTATCTCGTATCTCGTATCTCGTTGGGGCCCCCAATCTCGTTCAGCATATGAAATCTCGTTGCATCTCGTATCTCGTTATCTCGTCCTAATACTGTATCTCGTCATCTCGTATCTCGTGCATCTCGTATCTCGTCACAAATAAATCTCGTCATCTCGTGATCTCGTGTTTTAGAAAATCTCGTGGATCTCGTTGATCTCGTTATCTCGTCCGATATGATTTATCTCGTATCTCGTTATCTCGTCATCTCGTCTATCTCGTATCTCGTATCTCGTATCTCGTATCTCGTTCATCTCGTCCTACCAATCTCGTCAGATCTCGTATCTCGTTAATCTCGTTACATCTCGTGTTATCTCGTTATCTCGTAATCTCGTGATCTCGTAATCTCGTTATCTCGTGTGGATCTCGTCTTATCTCGTGATCTCGTATCTCGTAACGTTTAATATCTCGTATCTCGTTTATCTCGTATATCTCGTATCTCGTATCTCGTGGTGAGATCTCGTGAACGGCACGATCTCGTCATCTCGTCATCTCGTATCTCGTATACGTTAGCCCCTATCTCGTTCCATATCTCGTTGTAATCTCGTATCTCGTTATCTCGTATCTCGTAATTCCTATCTCGTAATCTCGTGATCTCGTCATCTCGTGGATCTCGTAATCTCGTCGCGGGTAGGATGGATATCTCGTAGATCTCGTGGATCTCGTCTCATATCATCTCGTTGATCTCGTATCTCGTCATCTCGTGATCTCGTATCTCGTTATCTCGTGATCTCGTCTACATCTCGTGAATCTCGTGTCATCTCGTGGGAATCTCGTATCTCGTAGCTTATCTCGTTCAGAGAATCTCGTCGATCTCGTGGGGAATCTCGTATCTCGTATCTCGTATCTCGTATCTCGTCG"
pattern="ATCTCGTAT"

Counter(dna,pattern)


# ### Question 2
# >Code Challenge: Solve the Frequent Words Problem.
# 
# >Input: A string Text and an integer k.
# 
# >Output: All most frequent k-mers in Text.
# 
# Sample Input:
# 
# ACGTTGCATGTCGCATGATGCATGAGAGCT
# 
# 4
# 
# Sample Output:
# 
# CATG GCAT

# In[39]:


#this function creates a list using list comprehension of the kmer indicated, then creates a dictionary of the 
#occurences of the kmer. Lastly, the function returns the most frequent kmer.
def frequent_kmer(dna,kmer):
    kmer_count={}
    k=[dna[i:i+kmer] for i in range(len(dna)-kmer+1)]
    for kmers in k:
        if kmers in kmer_count:
            kmer_count[kmers]+=1
        elif kmers not in kmer_count:
            kmer_count[kmers]=1
    m=max(kmer_count.values())
    answer=[key for key in kmer_count if kmer_count[key]==m]
    return " ".join(answer)


# In[40]:


frequent_kmer("ACGTTGCATGTCGCATGATGCATGAGAGCT",4)


# ##### Actual Dataset

# In[43]:


dna="AGTCGGCGACCTAAAGGAGGTCGATAGACGAGTCGGCGACCCATTGGGAGTCGGCGACAGTCGGCGACTAATTATGCCATTGGGCTAAAGGAGGTAATTATGTAATTATGCCATTGGGTAATTATGTAATTATGAGTCGGCGACTAATTATGTCGATAGACGTAATTATGAGTCGGCGACAGTCGGCGACAGTCGGCGACCTAAAGGAGGTAATTATGCCATTGGGTCGATAGACGAGTCGGCGACTAATTATGTCGATAGACGCCATTGGGCCATTGGGCTAAAGGAGGTAATTATGAGTCGGCGACTAATTATGAGTCGGCGACAGTCGGCGACCCATTGGGAGTCGGCGACTCGATAGACGCTAAAGGAGGAGTCGGCGACCCATTGGGTAATTATGTAATTATGCTAAAGGAGGTCGATAGACGTAATTATGCTAAAGGAGGTAATTATGAGTCGGCGACCTAAAGGAGGCTAAAGGAGGAGTCGGCGACAGTCGGCGACAGTCGGCGACTAATTATGAGTCGGCGACTAATTATGTAATTATGCCATTGGGCTAAAGGAGGCTAAAGGAGGTAATTATGTCGATAGACGCCATTGGGCTAAAGGAGGCTAAAGGAGGCCATTGGGTAATTATGTAATTATGTCGATAGACGCTAAAGGAGGAGTCGGCGACCCATTGGGTAATTATGTCGATAGACGAGTCGGCGACAGTCGGCGACCTAAAGGAGGCCATTGGGCTAAAGGAGGCTAAAGGAGGCCATTGGGCTAAAGGAGGTCGATAGACGCCATTGGGCTAAAGGAGGCTAAAGGAGGTCGATAGACGCTAAAGGAGGCTAAAGGAGGCTAAAGGAGGTCGATAGACGAGTCGGCGACCTAAAGGAGGTCGATAGACGCTAAAGGAGG"
kmer=11

frequent_kmer(dna,kmer)


# ### Question 3
# 
# > Reverse Complement Problem: Find the reverse complement of a DNA string.
# 
# > Input: A DNA string Pattern.
# 
# > Output: Patternrc , the reverse complement of Pattern.
# 
# > Code Challenge: Solve the Reverse Complement Problem.
# 
# Sample Input:
# 
# AAAACCCGGT
# 
# Sample Output:
# 
# ACCGGGTTTT

# In[70]:


def reverse_complement (dna):
    complement=list(dna)
    for i in range(len(dna)):
        if complement[i]=="A":
            complement[i]="T"
        elif complement[i]=="T":
            complement[i]="A"
        elif complement[i]=="C":
            complement[i]="G"
        elif complement[i]=="G":
            complement[i]="C"
    return "".join(complement[::-1])


# In[71]:


reverse_complement("AAAACCCGGT")


# ##### Actual Dataset

# In[72]:


dna="GACTTATACTACCTAGGCGGGGCCACTATCTTTAGCAGCTGTCTGAGACGAGTGGATTACGCCTAGTACCTGACCGGTTCTTATCACAGGATGCAGCGTTATGTGTGACTCGCCCTCCTACTCATAGGAATCGCGCCATCGGAGTGTGCGCGTTGACATTGCAGTTGTATAAGTGCTTGTAGCTTATGTTCATGGCACAGGTTCCTGGTGGCACCGTAGGCCGGCGGGCCTATCCTTGAAATAAGGCGGTGTAAACAATCATGGAAAAACAACAATGTAGTAATTAAACCCACTGTTACCCAGCAATGCATCACAGATTAGGAAGCGCAGGGAGAGAGGACCGATAGTCTGCGGTACCGGGACGCGGATCGAAAGCGGTATCGATGGAGCGTGTTTACCGAACTTAGGGGCTTACTTGCACTCCTACGTATGGTGGAAAGAAGTCCTGGGGTACTATCTTGGCAGAAGAATCTGCCTACTAACTCCGAGTCTGTTGGAAAATACTATCGACCCGTCCGATGAATGCCGTAGGGAACAATTCCGTTGGTGTCTACTATCTGCAGTGAGATGGTTGCGGTGCAGAATGCCTTAGGACGTATTGCGAGACCTGTGACATGGAGGTGTAATATTGGTTTCGCGATCTTGAGCTGGCGGCCTAGGAGAATCCGCTGAAGTGGACGTTCTTTTAAACACCTTGCCTGACCTCTACGATCCGTCTTAGTCCAGATACAAGTGGCCTGAATTGAGCTCACCGCTTTGTTATTTCTAAGGACCGCCTAAAGCTACGAATCCAGAGAACTGACATCGCACCGCTCCGTCCTTAAACCGTACTCTTCTCAACACATATGGCATTTCTAAGAACCCTGGCCACATATGGCATCCTGTGTCGCCACTAATAATGCAGATGTAAAAAGCTCTCAATCTGAGAGGTTGGTTTGGGCCTAAAAAGCACCTCCTTTTCGACAGATGCTTTCTGACGCGGATCAGAAATCCTGCACTAAGCTCTATTGGCGAACTGTTGCACCGCGTGGGTGTTGCCACGGGCATCTTCAAGGGGCGGCGATGAACATCGGAGTATGCCGCGGCAGAACAAAGAGAATCATACCGCGAAGCTAATGTAATCTCTGCTTTACGTTGCACCTTGCACCACCTCGGGAGTAAGGTCCGTGGGCTTGCGTCGGGCAACGAAAGGAACAGGCCAGACGAGACCGCGGCATCCACCAAACCTGAGCCCCTATATCACTCAGCCTTGACGGTTCGCGGGAGTTGACACCCAAGTCCAGGATCTCTATCGTTAGCGCCGACATGAATAACTAAGCTGTTGAAGCCATTGTAATTGCGAGAATTACACGTCCCTATTGTCATGTAGGTACCGACTACGTCCGGATTCAATAACGACCAAGATAGCCTGGAGCAACGCTGCAACCTGGAGCGTGGACAAACACCGCGACTCTATTGAGCAAATATTCGGGAAGACCCGCTCAGCAGTCCCGCCGTTGAAAGTCGTTCCGCCTCCTAGTAAGCGGACACTGCACTGACCAACTATCTATTTCCGTTTAGGGTGACCAATGATAATCGCTCTACTTTTTACTGTGGAATCCAGACTACTCGTTAGTCACGCTCATGGGGATTTAGATCCCAATTTTGACCTATCCCGTTCTCCGCGTGTTATCGCAGTGCATGCCTAGTCGGCTCAGCAGCCCGCCTAGGGTCATCCGGTTCCCCGCAAGCGCTCACCGGCGAACACGACTGGGCAACCAGAAACGAACATATACTACAGCCAGGTACATAGGATCCCGCGCACACGCAATTCGCTGTGGCCCCGTTTATCCGACATGGCGCCACTATTGATTAGTATATCCAGGCATTGGGCGCTGATCCGACGGTCCACATATTTATTACAATCCTTCTCTGCTCCGCCAACTACTACACACTTTTAAAGCCGACCACAAAATAGTAAATACCAACTACATATAATTTTCGGATCGCCCTATGCGGACCGAATAAACCTTTTCCTCCAAGTTGCGCGCTAGACAACGCAGGTGAGTCTGACACCTTGTCTGGCCGTTGTCCTCCTAGAATTCTGCCTGGTACTCGAATCATACTACTGAGCCTTAAGCAGGATAGCCCCACTATCCGGAATTGTCAATCATTGATCCACTCAAAGCAAGTCCCTTCCGACCCTAGCACTAATTTCCGGGCACGTACAGTGACTATTCCCCTGGGAAAAGACTGTCGACCGGGAGTAAGGGACTTGAAATTCCACTCTGGCACCTGCTCGTGTTTCACGAAACGTCCGTTTGAGCTCCAACACAGATACAGCTTTATTTATACCTCGGGATTTTCTCCACTGAGTCGGAAGGGCTCTGCAGAGCACCCCAGACATTCAATGAGCAATCGGCAAACGTACTTAACCAGCCAAGGCTGGGTTTCCTCCCTCGATCCGTCCGACTCTCCAGTTTCCGGGTTTGGGGCGCCGTTTACCCCTCTTGATAAGTTTGGTAGCTATCATTTTATGGATCATTTTGGGTTTGCTTTACGGCTGCTAGAATGCTGTCATCTGATCTGGCTCCTTGAATTTGGGTTCACACCGTGTCGACGGCGAGCTACGTGGCAACGGACGTCCAAGAATTCAAAATGCTAAGCATACTTTAGCCATCGTGCACGCACTCGAGACGCTATGGTTTAGAAAACAAATGCAGGTGGAATTCCCTCAAGCGCCTGGAACGGGAGCAACGCCTTTGGGAGACGTAATCTTCGTTCTCTCGGCGTGGAGTATGCAGTTGACGGCCTATCTTTGGTCCGACAAAGAATCACCTAAGCTGAATCTAATAGACCACTGCTAGGGAGCGTAGCGGGGCACTAACTCTAGAACGACCGAACACTCAATTCTGGGTAGACATTCCACGAGCGGTCTACATCTGACTGTCAGAAGCTAACTTGTGCAGTTATGCACGTAGACTTGCAAACGGTAGAGCTTGGCTTGGGAGACGCAGTATCTGGGCTGGCTGCGTCTATCATCATCCATCTCATCAACCTGAGCCCGATCCCTCTTAGCTTGACTTCCACCCTGGATGTGAATGGACGATGCTTCACGGACGCTCCGGCTCCAGCAATTTCTAGGCCGAACATAAACTGTATCGTTAATGTCGAGTCTGTCATACCGCGAATTGAATCTAGGTGGCCGTTAACCAACGTGCCTCGAGGGATGGGGCCCCTGGGACTGCCCGCCAGTCTGAGCGCGAACGTATGCGCTAGCCGTCGATAGCGGATTGATCTAGAGTTGGCGCAGGCGTCGTATTAAAATAAAGGGCCACGAAATATCAGATTCTGTTCCGCGTCTACGGCCGCCGGCCCATTCCAGCATTCGTAACTGACCCGATTCACTCTGGAGTTGCTGCGCCCTACTTTACGATCGGCGCATGAGCATAAATATCGGGCTCACCAGTAGTACCGGTCAACCTTTAGAGGTCATAGTTGTAATTGTTCTGGTTGCCTATATGGGCGAGAGTCTATGGCAAGGTCCGTGGAATCGAGTAAGTGACCACGATCCTGATGACACAGGAGTACGGCACGTGAGATCTATCTTCATTAGACTGGTTATTATCCGTGAGTTCACATTTAAGATATCGAATATCCCTCGGTCTAGTCTATTGAGCCGATCACCACGTTCAAGAGCGCCCGAGTAGACATTGCACACTACGTTGCGCATCATTAGATTCATGATCATGTCTAAAGCTAACTAGAATATGGAACCTCCAATGTTGCTTCTTTACTTGGGACGCAAATCGTTTATTTTGTTCATCCGGTTCGGTTTGTGTGCGTATAGTCGCATGTACAACTCCTACATGCTCCTGCTGCAAAGTATTTTCGGGTCCCCGTGACATTATTTTACCTAGGTGAGCGCCCGTATGATTGATTCTTCCCTGTACCAATCACCGTAGATATATTGAGGTCCGGATGATTCCAGTGCCCCTACTGTACGGATCTTCAAGGGTTGGAATCCTCAAGCATACACCGAACGGGGATGTATTCCCATATAGCCAACCCCGAACAGCCAATCCTACTATACCTGCCGCTCGTCGATTGACTGGGATGCAACCAACCGTATGAGCGCAACAGACTATTACCGGAAGTATCGTTAAGGCGAATCAGGATTCCCGCGCGAGCCCATTCTGTAGCGACCCTACGACCGTGAGTCCGTATATATTGGGAAAGACTTCGGCATGAGAGCTACCCAATGGGAGTGTTATCTGGTGTTTTAAAACGGCGTATGGAGGGCAGCCTCTACTCTTCCTCGTTAGACAAATAATGCGGTCTAGATAGAGACGGCCGGGATAGCGCGCCACGTTGTTAGATCCCCGGACCGTATTATGGCTATATAGTATAAAAGGGAAGTCTGGAGACTCGATGCCTTTATAATGCGTGGAATGGCTTTACACCCTTACTTCAATTGTTTGTTTTCCTCGTGCCCCAGAGACCTGAGTTGCCGACGGTTCATATATCTTAGTCAGTTGCTCTTTCCTGTTTCTTAGCACCACCCAGACCGAACTGATCGGCCACAGACTGCACATTGGTGCTGACAGAGAACTTGATCCACGGACTCGATCGTACCTCCGTGCTATGTATTATCCTCTTATATACGCCTAGGATTATATCGTGGCTATCCGGGGCAGAGTACTTATAGCCCGAACACATGACTAATACCGTCGCGCAGGCTCTCATTTTCCTGTCACTTATGGAGTCGTTATAGCATAAGCGAGCAGAAATGTTCAAATCTGCATTGGGGGATAGCCCGTCATAAGGGTGCGAATCACCTCCTCGATCTTAGCAAAGCATTAGCGCTCGCGCCTGCTACGCTACGGGATGTTACCTCTCGCTTGAATTGGCTAACGCATGAATCAGCGTGCTTGGATCTGTCCGTCGCCTGTATTCATGAGGCCCGAGGCTACCTCAAACAACTGCCAAAGGACTGCCTGATGTGGCTTAGCTAGCGGCCCTCAGCAGTGCATTGGACGGTAACCGAGGCATCGCGCAGGTATTCCGTTGTCCATTTCAGACTGATGTCGCATCGTCGCGGATACCTGGGATAGGGCATATAGTATCTGCTTCTAAACCAGGTAGCGCAAGATCCTCTATCTCATATCACGGTACTCCATCAGGTAGGGGGTCTTGCGGAGAACCGGGTCCCAAAGTTTCTTATGGTTTTCAAGGGCCTGCACTTATAGGGGTCTAACGGGGAGGACGCCTACTCACTAACAGGCGCCTCTCTGAGGGCGTGGATGAGGGGACGAGGCAGCATCGAAAGCAAGGCTCTGGTCCCTCGGTAACGCTGGCGCCGGTTCGGTAGCACGACCGGGACAAATGGTTGACCTAACTGGGGGGCAGGGGCAGGAACGAGGGCTTCTAACTTTTTCTAACGATGGGCAGACACTATCTCCATCAGTTTGGGTAGAACCCTAGTCCAAGCCTTAGAACTAGTTGGACGACCCGCGACATGCTCGCGGGATCCTCCAAAAAGTTCGTTGTACAGGGCCGATGGGTTATTTCATTGAGCTTCATAATTATCTTCGATTGTGCTCTGGGTCGACGCGGCAAGTACATTCGCTCTTTTAGCAAGGTTCTTGCGTTTGAGGAAGGTGCTACCTTCTGCCGCAGACAGCCTGATTCCCGACTTGCGCTCTGAAGCTCCTCACTACCCGCAATGAATACTGCAGTGGGTACGAAAGGCGCCGATTCGTCAACCGCCTTACAGGGAACTGGGATCGCCTCAGCCAAACTAGACCAGCCTCGTTTTCAACTGTGATTTATACGGTCGAAATGGGCATTTTGGAGCACGCTTTCCTGCTTCGGAATGAAGGTCCATACTGCGGGAATGATCTCAGTACCGTGGTAGTCCAGTGCGACAGCCATTGGGTGAAATTTCCGAGGCATGGGCGCCTGATCAACCTGGCAATGTCCGCCACGTACCGCAAGACACGCCATCAGGGAGGCGCTCCGTTGGCCCAATGATGACATTGCTACTGCATAGGGCACTGAAAGGTGGTGAATAGCGAGTACTCGCGATTGGCTTGCCAAGCGGCTACACTCAACCCTAAGATACGAAACCGCAAGGAGGTCATGGCGATTGATGGCCGCTATTAGGTTTCATTATGGCCGCGTTCGTCGGCTTTAAGGAACGCGATGACGTTGGTACGCAGTCCGTCCATACAGGGCCCACAAGTCGTTAGCAACCACAGGCCGTACTCGCCTCGATCTGTCGCTATTGTCTCTGATAATACAACGTGGGTGCCACAAGATCGAGGCAGCTTCATTCACCGCGTTCATTACCAGTTTGGACGAATCAACCAACGACGCTTAAGTCGAAGACATCTCACGGTCCACACAGAGAGCCACTATCTGCTCGAGCGGTGTTGATGTTAACCACCAGTGGATGACAGCCACCGCTGCGCGCAATCTGGTTACATAAATGCATTATGATGACCTGAAAAAGCACCGCCTCGAGTATAGAAAAATTCCACCAAACCGGGGCAGATCGAGACATCGGCGACACATCGTCTGACTCGCCCAATGTTAGACAGCGAGAAGGGTCTGGCGTGTTTCCCCTTTCACACATAAATGCAGACAGCAGAGTATTTGTAATAGTCTGCTCCCGAGACTCCTTTTAACCGGCTTCATTACACGCAAAGGCCGCTAAAAAGCCTTGGTAGCAAGAATAATGACATCACACGGTTAGAACAGCTCTTATAACAGACTTTTCTTTGAAAAGTGATTAGGGAAGGGCCGTATATGTACGCGGATTACTGTTTTGTGTCTTAGTCGCAACCCAGTTACGCCGTCACGCGTTGGTCGGATGTCTTCCAGCTACAGTCAGTCTCCGTCGTCACATGGAGCCGTGGTTCTTTGTTTGCGGAGCCAAAGACAACACAGAGCCGCTAGAAACGAAGGTTCTTTGCGGAGCTTAAACGACTTAACGGGGACTGAACAGTTCAATTTAATGGCATTGCGAAAATGAGCGACTGCATAGGAAAATTCATGCACATGCACCGGGGACCACCTCTTCGTATCTAAGTGAATTAGATGAGACACGCAGGTGAGGTAAGCGCATCCACGATTCGTATGCTCAGAACTGGAGCCTCCGCGGACTGAGCCATCCGAGGGTTCATAGGCTGGCCACGATTCTGGGCCCTGGGCATCAGCTATAATCTCGAAACACAACTCAGACTCCTATTGTAAAAATTTTACATAGATCCGAAGGGCCCCCACCGAGCTCTACAGCAAACGGCAACAGCAGCCTCGTCTTTACCACGTGTTCCAACACTGACTCGTCCCTGATGAATGTACTGATGACGTTTAGTCATAGATAAGTTTGGAACTAGACCGTTGGCGAGATGTTTCTGTGTACCATCCTGGAACCCGAGCCGTTGCATTCACATCGCCAGCCTTAAGCTATAACGTGAACGATTCGCCTGTCGACCCTGCCCGGAGTGGAAATGACTGGACCAACGCCGACCCCACGGTCTATCGTTTGGATTTAAGGCTTAAATTGAATGTGGAATGCCGCCAAACAACTTCAAATAGGTCCGCAAGTCGAAAATAGGATCGAGCTGAAAGCGGGCCACTAAAGTTATAGCGATAACCCGCGATCAGTCTTTTGTCACTGAACTCCGTCTCGGTGGGCGTGGATATAAATGCTGCCGCTCACCATTCGCTTGATAGCACGCCGCCCAGAGCTTAGCCGTATTGATTAACTGTCGTCTAGCTAATGGCCGCGCAAGAGCAAGAGTCCTCACGCGCGCTTAGCCCACTCGCCCAGAACAGGGTGACACATCATTAAACAGGCATAACACCACAGGACTAAACTTGGCCCGATATAGATGCTCTGCCGCTCAAACTAGGATTCGGTACCTCTAGAGCGCGTAGGATGATTCACAGATGCAGCTGCGTGTCGCGGTTATTGCAGGAGGAAAAGAGTGTGGTACCTACGCCATTACGCTGAGAACAATCATCATTTAATGTAGAGCTTTCATGTTTGACCTTTACTGATTGAGATGCGGGGTTAACCGTGGACGCAAAATGCGCGGTTACAATCGTTAGTGCTGTACCGTCCCCTCGTGACGCGAGCGAGTCCAAGAAGGCGAGGACAAACTCCTTATACTTACTACTGCCCTTGAAGCCAATAAACACGGTCCTGAAGGAGCGCCGATTAGCGCCATTAAATACACCATATTGCTCTTGAGCGGTACTACTTTGAATAGCGCGGAGTAGTTCGGCGCATGGGCCCGCAATG"

reverse_complement(dna)


# ### Question 4
# > Code Challenge: Solve the Pattern Matching Problem.
# 
# > Input: Two strings, Pattern and Genome.
# 
# > Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.
# 
# Sample Input:
# 
# ATAT
# 
# GATATATGCATATACTT
# 
# Sample Output:
# 
# 1 3 9

# In[123]:


#this function creates a list for the kmers and returns the index of the patterns that match the pattern
def pattern_matching(pattern, genome):
    kmers=[genome[i:i+len(pattern)] for i in range(len(genome)-len(pattern)+1)]
    answer=[i for i in range(len(kmers)) if kmers[i]==pattern]
    print(*answer)


# In[124]:


pattern_matching("ATAT","GATATATGCATATACTT")


# ##### Actual Dataset

# In[125]:


pattern="CAATATGCA"
dna="CACAATATGGACAATATGGCAATATGCAATATGTCGGCAATATGCAATATGACAATATGATCTCAATATGTACAATATGCCTGCAATATGTCAATATGATCAATATGTTCCAATATGTCCCAATATGGCGTTTAGCAACAATATGTCAATATGCAATATGCGGCACACAATATGCCCAATATGCAATATGATCAATATGCAAGCGGATAATTCAATATGCGACTCAATATGAATAGCAATATGTCCGTGCAATATGGCAGCAATATGATTCAATACAATATGCAATATGCAATATGTTGGGGAGCAATATGGTAGTAGCAATATGGCAATATGGCAATACAATATGCGAGTTGACAATATGCAATATGCAATATGCGTACAATATGAGCCAATATGCAATATGCAATATGCTACACAATATGCAATATGACAATATGGCAATATGTTCCAATATGACAATATGTCAATATGTCAATATGCTCAATATGGCGCAATATGCTCAATATGGATCAATATGCCAATATGACAATATGCTGTCGCGCAATATGCAATATGTAGGCCAATATGCAATATGTCAATATGCTATGTCAATATGCCAATATGCCAAAATGAACAATATGTCTGCAATATGGAGCAATATGCAATATGATTCTACTAAGCAATATGCAATATGTCCAATATGCGCTTTAACAATATGCAATATGCCCACAATATGCCCAATATGCTTTCCAATATGCCAATATGCAATATGACCAATATGCAATATGCAATATGGCCAATATGCAATATGCAATATGATGTCAATATGCAATATGATACAATATGGACAATATGAGATCAATATGTCAATATGGAGCCAATATGACAATATGCTGTCGCAATATGCCAAGCAATATGTCAATATGCAATATGTAAATCAATATGGCCTTTTTTGGTAGCAATATGCAATATGTAATCAATATGCGACCCAATATGCTGGCTACAATATGACAATATGCCAATATGCAGCAGATTCAATATGTGTTATAATCAATATGAACGGCAATATGTCCAATATGAGCCAATATGACCAATATGATCTTCAATATGCAATATGCCAATATGATATCAATATGCAATATGCGTGCAATATGGGGCAATATGACAAGACAATATGGCACAATATGTGAGCAATATGCAATATGCAATATGGAACCAATATGCCCAATATGATCTTACAATATGTCAATATGAGCGTTCAGTACTTAAATCAATATGCTTCTCAATATGACAATATGCGGTCAATATGTGAGTGGCAATATGCAATATGGATCAATATGCAATATGCAATATGGACATCAATATGCTATCTGGCAATATGCAATATGCAATATGCAATATGATCAATATGAACAATATGATCCAATATGACAATATGCAATATGTGGTGGAGCTACAATATGCGCTGAATTTAGGCCCAATATGCCAATATGGCCCAATATGCAATATGCCAATATGCCAATATGTCAATATGCATCAATATGTCAATATGTACAATATGTCAATATGCAATATGCGGTATGGCGATCAATATGACCAATATGTATCCAATATGACAATATGCAATATGCAATATGTCAATATGAGCAATATGCAATATGCCAATATGCAATATGATGGCAATATGACAATATGTTACGGACACAATATGACGACAATATGCAATATGGACCTTCAATATGACAATATGCAATATGGATATATGCAATATGTATGACAATATGTGCCAATATGGTTGAGTTCCAATATGGACAATATGCGCAATATGACAATATGGGCAATATGCGTGTCGCCAATATGCAATATGTGCAACAATATGCACTCAATATGGAAGCAATATGCAATATGCTCAATATGCACAATATGGCTAAATCAATATGCGCAATATGCAATATGATCAATATGCAATATGCAATATGCAATATGCAATATGGCCAATATGCCCCAATATGCTGACACTCCAATATGGGCGCCAATATGCTAACAATATGTCAATATGCAATATGTCAATATGGTCGCCGTTTGAGGTCAATATGTCAATATGCAATATGGCTACAGCAATATGCAATATGGAGCAATATGTCAATATGCAATATGGATCAATATGCAATATGGTGGCAATATGAGGCAATATGTCTCAATATGGCGACAATATGCAATATGAGTAACAATATGCCCCCACGGAGAGAGCAATATGACTTCCAATATGGCTCAATATGAAACAATATGGTCAATATGCATCAATATGTCCAATATGTCAATATGTGGCCAAGGACGCAATATGCTTAGCAATATGCCCGCAATATGGGAAGTATCAATATGCAATATGCAATATGCACAATATGCAATATGCTCAATATGCAATATGCAAACTCAATATGTACCAACCAATATGCGATCTAGAGAGGTCAATATGGTATACTACAATATGCGCAATATGTGATGACAATATGCAATATGTTCAATATGGCGCAATATGCACAATATGCGCAATATGCAATATGTCAATATGGAGCAATATGGCACAATATGTCCTCCAATATGATCCAATATGCTGAAGGGCTTCAATATGGCAATATGGCCAATATGGGCAATATGGTCGTCAATATGTCAATATGCAATATGTATCAATATGCTATCAATATGCAATATGACCAATATGTTCAATATGTCAATATGCGGTTCAATATGATCCCAATATGTAGTCTCAATATGGACTCAATATGGGCAATATGCTCCAATATGTACATTGCAATATGCAATATGCATTACCAATATGGACCAATATGGTACCCAATATGCAATATGTGGCCAATATGCAATATGACAATATGTGCAATATGCAATATGTCCGCAATATGCGCAATATGTCAATATGTCAATATGGTGCCAATATGGTCCAATATGACAATATGCAGAGCAATATGCAATATGGCCAATATGTGACAATATGGTCCAAACAATATGTTTTCAATATGCAATATGCAATATGTACAATATGGTGACGCCAGCCCACAATATGCAATATGCAACAATATGTGACGCAATATGCAATATGCAATATGCAATATGCAATATGCAATATGCTCCAATATGTCAATATGTCTACAATATGACACAATATGCAGGCAATATGGGGCCAATATGCAATATGCAATATGCAATATGTGCCAATATGCAATATGACAATATGCTGCAATATGCCCAATATGATCAATATGGATTTCAATATGCAATATGACAACATCAATATGGCAATATGCAATATGCGGATCAATATGTTCAATATGTCAATATGCAATATGGCAATATGCATACAATATGCACAATATGGCAATATGCCAATATGCAACAATATGGCAATATGCAATATGGTTAACAATATGTGATACCAATATGAGTCAATATGCAATATGCAATATGGAGTCTCAATATGAACAATATGCAATATGTCAATATGAATCAATATGGATCTCAATATGTTTTTATTTCGGACAATATGGCCAATATGCAATATGGCAATATGAATCAATATGTGTGCTTCCAATATGCAATATGCAATATGTCAATATGACAATATGTATACAAGGCCGCCATCACCTCCAAGGTCAATATGTACAATATGCAATATGGGCAATATGAGCCAATATGCAATATGCAATATGGCAATATGCAATATGCCAATATGACAATATGCCAATATGCCAATATGCAATATGCGCCAATATGCAATATGGCAATATGCAATATGTCAATTCTCTCAATATGCAATATGGTGAGCGGCAATATGGCACAATATGCCAATATGACGCAAACAATATGAGGCAATATGGTCAATATGCAATATGTATTACAATATGATAATCGCAATATGCAATATGATTCCAATATGGCAATATGCCCAATATGCAATATGAGACCCCAATATGGTCAATATGTCCAATATGCGCAATATGGTTATTCAATATGTCGTTCAATATGTCAATATGCCAATATGGACAATATGCAATATGGCAATATGCAATATGACCCACCCAATATGGCACTGTCGCATAATCAATATGCAAGCCAATATGGGTCATACACAATATGTTGCAATATGATAAGTTTCTCACAATATGAAATTCGCCCTCGGAGCGATGTTTGGCCAATATGCAATATGACAGCACTCGCAATATGTCAATATGGCAATATGCACAGATCATTTGATAATCCAATATGATCAATATGGCAATATGATCCAATATGCAATATGCCCGCCGATAAATCACTACAATATGTTATCAATATGACAATATGGACAATATGGGATCTCAACAATATGTAACTCATAGTCTCCAATATGGACAATATGCAATATGTGACAATATGCAATATGCAATATGGAAAACAATATGTCCAATATGTTGCAATATGGCAATATGCAATATGTTGCGCAATATGAACAATATGCAATATGTCAATATGTCCCAATATGACAATATGCAATATGCACGCCAATATGTAACAATATGCCTTAGCAATATGACAATATGCCGTGCAATATGTACAATATGTCAATATGTCAATATGCAGTCAATATGCCGTTCTGCAATATGCAATATGTCAACAATATGCCAATATGTCAATATGTCTGTTAGCAATATGCGGACAATATGCGCAATATGGACTTGTATGGAGCTAGGCCAATATGGGCAATATGACAATATGTCCATCGACAATATGCAATATGGCAATATGCCAATATGGAACAATATGATGTCCTCAATATGCAATATGCACACCAATATGTCAATATGCAATATGATGTCAATATGAGACAATATGGACAGGAAACAATATGTCAATATGCAATATGCCACAATATGTTACAATATGTATCAATATGCGCAATATGCCGCAATATGTCAATATGAACAGAGTCCAATATGCAAGGCACCAATATGTCTTCAATATGTGCAATATGGTGCAATATGCAATATGCAATATGCAATATGAAGGATCAATATGGGCTTGCAATATGGCCAATATGCGGAAGGTCAATATGATCCAATATGCAATATGCAATATGAGGAATCAATATGGTCCAATATGACGCAATATGGCAATATGCCAATATGCGACCAATATGCGGACAATATGGGCGTAGCAATATGCAATATGCAATATGTAGGCAATATGTCAATATGGACTCAAGAGCCAATATGTCAATATGCAATATGCCTCAACAATATGCAATATGCAATATGAATACAATATGGGCACAATATGCCAATATGTGGCAATATGCAATATGCAAACGACACCAATATGGCAATATGTAGCCAATATGTGACAATATGTTCAATATGCAATATGATCAATATGCAATATGAATGTGCAAAAACAATATGGTCTAAATATTACAATATGAGGCAATATGGTCATAGAACAATATGGCCTACAATATGCAATATGGAAGGCAATATGTCAATATGATGTCGCACGGCAATATGTCCAATATGCTTTTCAGTCAATATGCCCAATATGCTGTCACAATATGACTTGGACAATATGGAAGCAATATGAGGTCGTCTTATGTGACCAATATGGCACAATATGCCCAATATGCAATATGCACAATATGCAATATGCAATATGAGCAATATGCCAATATGCAATATGTCAATATGAGCAATATGTCTATTCAATATGGCAATATGGTACAATATGCCAAGCAATATGTCTCAATATGACAATATGCGTCTCAATATGCTCAATATGAGTCAATATGACAATATGCAATATGGCATCAATATGCAATATGACGCAACGTCAATATGGGGCCCGCAATATGCGGGGAGCAATATGCGCAATATGCACCAATATGAGCAATATGGCAATATGCAATATGCAATATGTCAATATGGAGATACAATATGGGCAATATGGTCAATATGGCCAATATGCCCTCAATATGCCCAATATGTTCAATATGCATCAATATGCAATATGCCAATATGAGGCCAATATGCAATATGAGCAATATGCAATATGGCTGCAATATGCTCAATATGACCAATATGTAGCAATATGGGTCAGATGTGCGCAATATGCAATATGGTGCAATATGCAATATGTTCGACCAATATGTTTTAACACAATATGTCGAGAAGATTGCAATATGCAATATGCGTCCGTTCAATATGTGCAATATGCAATATGCACAATATGCAATATGGTGGCAATATGCCAATATGTCATTTTACAATATGTCAATATGCGAAGCAATATGCAATATGCAATATGCAATATGCAATATGGATCGACGCAATATGCCAATATGCAATATGCAATATGTCGCACAATATGCTTATCAATATGTACCAATATGCTTCAATATGTGTTGTCAATATGCAACCACAATATGCAATATGTCAATATGCAATATGCGACCAATATGCAATATGACATGCCAATATGTTCCGTGCAATATGCCCAATATGTACATCAATATGTCAATATGTACCAACAGCTAGCAGACCGCAATATGCAATATGCAATATGTAACAATATGCCGAAGCAATATGTCAATATGTATCAATATGAAGCAATATGGACAACAATATGAGACAATATGCAACAATATGCAATATGCAATATGCCAATATGGTCTGCCGGCAATATGAGTAGGACAATATGTCAATATGCACCGCCAATATGAGACCAGATAACAATATGAGCGATACAATATGGATCAATATGTCAATATGCATATCAATATGCAATATGACAATATGTTTAGTATTCAATATGCAATATGTGTTGTCAATATGGGTGTCATACACAATATGCAATATGGCAATATGCAATATGCCAATATGGCAATATGAACAATATGTGCAATATGGACCAATCAATATGCAATATGTCAATATGTACAATATGGACTTTGCAATATGCAATATGAAACCAGGCGCAATATGGCACAATATGCAATATGCAATATGATAGAAACAATATGCAATATGCGACAAGGATTCAATATGTCACGGCAATATGGATCAATATGCAATATGCTGGCAATATGCCTCTCCAATATGACAATATGCAATATGCAGTCCAATATGTCAATATGGCAATATGCAATATGGACACAATATGCAATATGCACAATATGCAATATGTTCATGCCAATATGGGTCAATATGCAATATGTATCAATATGGTGTAGCAACGCAATATGATAACAATATGCAGCAATATGACAATATGCTGCCAATATGTCGCAATATGGTTACAATATGCACAATATGACACAATATGCAATATGCAATATGCAATATGACAATATGCAATATGCAATATGTTCAATATGTCGGTATCAATATGTCAATATGCAATATGGGGCAATATGGGCAATATGGGTCAATATGCAATATGCTTCATCCACGATCGGTCGCAATATGTATAACAATATGCAATATGCAATATGTCAATATGACAATATGCGCAATATGCAATATGTACAATATGTGAGGACAATATGACAATATGGCCAATATGTGTCAATATGACACAATATGCAATATGTCAATATGCAATATGAATCGCAACCTGGGGTAGTTCAATATGATCTGTACCCAATATGGTACAATATGCAATATGCAATATGTAACAATATGCAATATGGACAATATGTTAGCAATATGCAATATGGGAAAGGGGCAATATGACAATATGACAATATGGGCCCCAATATGATCAATATGCCTATTGACAATATGGTGTGCAATATGTGCGTGTTTCGTCTCAATATGCAAGCCCCAATATGACGACAATATGGTACAATATGAACAATATGTGTCAATATGGTAGAGACGGCTATTCAATATGCCCCAGTGCACGACTCTTCAATATGCAATATGCAATATGCCAATATGCAATATGCTTCAATATGTATGAGGGACAGATAAGCAATATGACAATATGCCAATATGTTCAATATGACGTATTTTCAGCAATATGATTCAAGCTGCAATATGCAATATGTAGGGGGGCAATATGCTACAATATGACCCACAATATGCAATATGCGCAATATGCCAATATGGAATCTAGCAATATGCTGACCCAATATGCAATATGGTTCCAATATGGAACAATATGATGGCCAATATGGGCAATATGGTGCCAATATGTCGCAATATGCAATATGACCAATATGCAATATGCAATATGCCAATATGGCAATATGACAATATGCAATATGCAATATGTTCGCCAATATGAACTCAATATGACAATATGAGACAATATGCAATATGTTACCAATATGACAATATGCAATATGTATCAATATGGCAACTTCAATATGTCAATATGACCGTGTGCAATATGCTCAATATGGTTCTTACAGCTCTCAATATGACAATATGCCAATATGAACAATATGCCACCAATATGCAATATGTCCCAATATGCAATATGATCCCAACAATATGAAACATCAATATGCCAATATGAGGCATCCAATATGCAATATGGATCAATATGCCAATATGGCAATATGCTCAATATGCAATATGCGCAATATGTTACAATATGCAATATGGGTAAGGCCCGACACAATATGCCCAATATGGGGTGTTACCAATATGCAATATG"
pattern_matching(pattern,dna)


# In[ ]:


#working with the Vibrio cholerae dataset provided and checking where CTTGATCAT occured.


# In[127]:


with open ("Vibrio_cholerae.txt","r") as f:
    f=f.read()

pattern_matching("CTTGATCAT",f)


# In[185]:


def frequency(dna,kmer):
    kmer_count={}
    k=[dna[i:i+kmer] for i in range(len(dna)-kmer+1)]
    for kmers in k:
        if kmers in kmer_count:
            kmer_count[kmers]+=1
        elif kmers not in kmer_count:
            kmer_count[kmers]=1
    return(kmer_count)
            
def find_clumps (dna,k,l,t):
    answer=[]
    for i in range(len(dna)-l+1):
        window=dna[i:i+l]
        freqmap=frequency(window,k)
        answer+=[a for a,b in freqmap.items() if freqmap[a]>=t]
    return list(set(answer))


# In[187]:


print(*find_clumps("CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA",5,50,4))


# ##### Actual Dataset

# In[189]:


dna="TAAACGTATACGTCCATTCCACGGATCACGGATTTGCTCTGCGAATATTCAACGCAAAACCGGTTAACCTCAATCAACAGGCCGGGCTATCGGACTTGAATGGCGTGAAAATTCTGTCGTAGGTTGGTGGGGCCGTGAATCCTCAAGTCCTCAAGCTCAAGGTGGGCGGCTAGGTCACGGGAGTGAGCCCTTGAGTGTAAACTGGCTTCGAGTTCGACTGGCACGGAAACCTCCGGGTCCTAGTCGTAATCCTTCACTTCCGTCAATGAGTGAGATCTGCGAACCATCACGGGCAAGGATCCGATGCCGATTATGCTCGACCCTAGGTGTTATGGACTAATATTGGGACGCACCTAGTCCAATACCGCCTTTAAATAGTATTGTTTAAGTTCGGGTTCGTAAGTTCGGGTCCGCTCTATACTCACCTTTGGCAGCTTGGCACGTCAGAATAATTATCACATATTAATTATCACACAACATGCAGAAATAAAAGTGCTCCTCATCCTGGAGCCCATAGCAGTCCATTCGCGAACAGCGTACTGTGAGTACCCGTAGAATTAAACGTTCCGACAGGGTCACAGCATATGGCACCGTTCAAAGTCAGGTGCAGGGCTGAACTGCGTCCGTTCGGGACGCCCGTTAGAGGGGCAGGATTCCGTCAAAAATCATCTCGCCGTCAAACTCTAATCTAGTTCCTTCTCCTCATCTTCCGCAAGCCGGGTCCTAATATATTACTACTTAGCAGAGGTCAATCCGCCAATGCCCTCTATTTGTAGTCAGTCGCGTAAATTATGGATTGTGGGCCTTGATAGTGAGACTTCATATGTCTAAATAGTAGGAATACTCTGTGGATATATAATTACACGTTCGCGGTACTCTCCCAGCGGACGATCGCTCTCCTCATTAAAAGGTTGGAAATAGAGTCGAGGTCTGAGGATATTCCCAAGCTGCTGCAGTCACCTGCAGCTGCAGTCAACGTTGCGCCCACGCCCACAACAATAGATCTCTTTTGGGCACGGATACGACTGTAGTAAAGAGCCGATCAGTAACGTAACCGAGTAACCGAGAGTTAAATAAGTTAAATCCTCTATGGTACTTGCTAGTCGGTTATTGCAGTTTCAACGGATCGAAAACGGAAGTTAGCACCTTTCCAGACATTTTGCGCAGTCTCACCAGCTGTGCGTTGGAAACGCCACAAGTTGAACTCTTAAATCGCGCAAGAACGAGACTCCTGCCTGATGGTACCGGGCTCATTTGTCTACACAGGCCGAAATAACTGGGAATTTACAATGTATCCTACCCAGACTAGTTCACATAAGCACGGCCATTCACAAAAACTGTGCCAACGATCTTTAGGCTCAAGATCTCTGATTATTCGAGTGGAATCATCATTTTGCGTACGCTGGCTCAAAGAAGGCGAGCCCTCGGGGCATTCGTGGTGACAGTGCGACCACAGTTCCGCCTAATTGGGAACGGTAGGAAATAACAACGGCGACACATGCCGTGAAACTTGCCTGCGGTTCACAAGTAAGACTAGAACTAGAAAGAAACATTAATTATCACAATGTTCCATATAGGTGGCACGGGTGATCGGGTGATGTCGCGGGTGATGGGTTTACATACGTTAGGACCCTTTGGAGCAGCCTTGGACTTTGGAGCCCCGACGTCTACGTATGTACAAAGTAATCACAGTCTCCCCTGTGAAAGGGTCTTCACTGTTACTCATTAGTTTATCGCGTTTCGCGCAACACCGTCACTATTTTGTCGAGATTCGCCGCATACGTAATCGGGTAAATCAGTTTTCGCCACCCTTGATGGTCGCAAATCGTAAGAAATCATCCTGCATACTCTTGTTCGAGCTTATTCGTCCTGGGTGGTAACCGTTCGGACGTTCGGACGTTCGGAGGCCCACTAGTCCCTCTAGCTAGTCCCATCCCA"
k=9
l=25
t=3
print(*find_clumps(dna,k,l,t))


# In[ ]:


#THE ANSWER WAS AN EMPTY STRING


# In[ ]:


#working with the E.coli dataset provided


# In[ ]:


#Exercise Break: How many different 9-mers form (500,3)-clumps in the E. coli genome? 
#(In other words, do not count a 9-mer more than once.)


# In[195]:


with open("E.coli.txt","r") as f:
    f=f.read()
a=find_clumps(f,9,500,3)
print(len(a))

